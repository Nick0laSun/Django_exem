# Generated by Django 3.1.3 on 2020-11-23 10:18

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bottomsensorsresults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('results', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'bottomsensorsresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Compositionofwaterlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('density_of_water_g_cm_3_field', models.FloatField(blank=True, db_column='density_of_water(g/cm^3)', null=True)),
                ('name_of_the_dye', models.CharField(blank=True, max_length=45, null=True)),
                ('layer_height', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compositionofwaterlayer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dambreak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wall_coordinate', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'dambreak',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_and_time', models.DateTimeField(blank=True, null=True)),
                ('title_of_exp', models.CharField(blank=True, max_length=100, null=True)),
                ('type_of_bottom', models.CharField(blank=True, max_length=100, null=True)),
                ('video_reference', models.CharField(blank=True, max_length=256, null=True)),
                ('schema_of_exp_reference', models.CharField(blank=True, max_length=256, null=True)),
                ('type_of_wave', models.CharField(blank=True, max_length=45, null=True)),
                ('duration_of_the_exp', models.TimeField(blank=True, null=True)),
                ('polarity', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'experiment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Forming',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'forming',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Laser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_reference', models.CharField(blank=True, max_length=256, null=True)),
                ('laser_coordinate', models.FloatField(blank=True, null=True)),
                ('viewing_angle', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'laser',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Particlesonthesurface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_particles', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'particlesonthesurface',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'results',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spreadoveranobstacle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obstacle_coordinate', models.FloatField(blank=True, null=True)),
                ('obstacle_height', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'spreadoveranobstacle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stringsensorsresults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capasitive_sensors_res', models.CharField(blank=True, max_length=45, null=True)),
                ('resistive_sensors_res', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'stringsensorsresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Typeofstratification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'typeofstratification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Typesofexperiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'typesofexperiment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Wavemaker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amplitude', models.FloatField(blank=True, null=True)),
                ('quantity_of_waves', models.FloatField(blank=True, null=True)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('operating_time', models.TimeField(blank=True, null=True)),
                ('water_height', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'wavemaker',
                'managed': False,
            },
        ),
    ]
